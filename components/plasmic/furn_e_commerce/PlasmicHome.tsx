// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u4w2nTMPubWj8TTdhou4Bg
// Component: 1RLmyoomo-In

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: Lf6_DrfASOl2/component
import ProductCarousel from "../../ProductCarousel"; // plasmic-import: IcGmonHhsP8c/component
import { ProductCollection } from "@plasmicpkgs/commerce";
import ProductCard from "../../ProductCard"; // plasmic-import: MGmJAdZplKvm/component
import { ProductMedia } from "@plasmicpkgs/commerce";
import Ratings from "../../Ratings"; // plasmic-import: bcTegk10Wycz/component
import FeatureItem from "../../FeatureItem"; // plasmic-import: ESEDpH_5Cp1D/component
import BlogPost from "../../BlogPost"; // plasmic-import: rDFwK0iAltUr/component
import Footer from "../../Footer"; // plasmic-import: 4Hhog7zaP_CK/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: u4w2nTMPubWj8TTdhou4Bg/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: 1RLmyoomo-In/css

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  productCarousel?: Flex__<typeof ProductCarousel>;
  featureItem?: Flex__<typeof FeatureItem>;
  columns?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__wpnfc)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vCncW)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___0TprB)}>
                <Header
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                />

                <ProductCarousel
                  data-plasmic-name={"productCarousel"}
                  data-plasmic-override={overrides.productCarousel}
                  className={classNames("__wab_instance", sty.productCarousel)}
                />
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__jdxdA)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3RDwf
                )}
              >
                {"New Arrivals"}
              </div>
            </div>
            <ProductCollection
              className={classNames(
                "__wab_instance",
                sty.productCollection__zgFBu
              )}
              count={8}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kcJiG
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </DataCtxReader__>
              }
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z1JeB
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              search={""}
              sort={"latest-desc"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard___39JA
                    )}
                    image={
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia__w65R4
                        )}
                      />
                    }
                  />
                )}
              </DataCtxReader__>
            </ProductCollection>
            <FeatureItem
              data-plasmic-name={"featureItem"}
              data-plasmic-override={overrides.featureItem}
              className={classNames("__wab_instance", sty.featureItem)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__pq47V)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ifWt4
                )}
              >
                {"Featured Products"}
              </div>
            </div>
            <ProductCollection
              category={"626a86bfda5c2c00128ebdda"}
              className={classNames(
                "__wab_instance",
                sty.productCollection__p14Q3
              )}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uFh7J
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </DataCtxReader__>
              }
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fp291
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
            >
              <DataCtxReader__>
                {$ctx => (
                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__tnaGh
                    )}
                    image={
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia___1Gr6L
                        )}
                      />
                    }
                  />
                )}
              </DataCtxReader__>
            </ProductCollection>
            <div className={classNames(projectcss.all, sty.freeBox__uJg5I)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n1Zay
                )}
              >
                {"Latest Blog"}
              </div>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__gJ5Cs)}>
                <BlogPost
                  className={classNames("__wab_instance", sty.blogPost__oiN0L)}
                  image={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__km1Il)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/furn_e_commerce/images/b1.jpg",
                        fullWidth: 370,
                        fullHeight: 250,
                        aspectRatio: undefined
                      }}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__dOjdw)}>
                <BlogPost
                  className={classNames("__wab_instance", sty.blogPost__sJh)}
                  image={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cHwUp)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/furn_e_commerce/images/b2.jpg",
                        fullWidth: 370,
                        fullHeight: 250,
                        aspectRatio: undefined
                      }}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___55Sl)}>
                <BlogPost
                  className={classNames("__wab_instance", sty.blogPost__j0Jqs)}
                  image={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ceoFq)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/furn_e_commerce/images/b3.jpg",
                        fullWidth: 370,
                        fullHeight: 250,
                        aspectRatio: undefined
                      }}
                    />
                  }
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fx9P)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__dRHc)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"90px"}
                src={{
                  src: "/plasmic/furn_e_commerce/images/adidas.png",
                  fullWidth: 90,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__wekEk)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"91px"}
                src={{
                  src: "/plasmic/furn_e_commerce/images/hm.png",
                  fullWidth: 91,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__netiy)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"98px"}
                src={{
                  src: "/plasmic/furn_e_commerce/images/kappa.png",
                  fullWidth: 98,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___1O4Ty)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"124px"}
                src={{
                  src: "/plasmic/furn_e_commerce/images/lacoste.png",
                  fullWidth: 124,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ywZur)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"125px"}
                src={{
                  src: "/plasmic/furn_e_commerce/images/levis.png",
                  fullWidth: 125,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "productCarousel",
    "featureItem",
    "columns",
    "footer"
  ],
  header: ["header"],
  productCarousel: ["productCarousel"],
  featureItem: ["featureItem"],
  columns: ["columns"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  productCarousel: typeof ProductCarousel;
  featureItem: typeof FeatureItem;
  columns: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    productCarousel: makeNodeComponent("productCarousel"),
    featureItem: makeNodeComponent("featureItem"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
